---

# additional network setup for terraform role
#
#                  -------
#                  |start|
#                  -------
#                     |
#          ------------------------
#          | Set machine hostname |
#          ------------------------
#                     |
#           ----------------------
#           | Retrieve list of   |
#           | network interfaces |
#           | from               |
#           | /sys/class/net     |
#           ----------------------
#                     |
#     -----------------------------------
#     | Remove unmanaged networks       |
#     | from /etc/sysconfig/networks    |
#     -----------------------------------
#                     |
#  -----------------------------------------
#  | Populate /etc/sysconfig/networks with |
#  |  configured networks                  |
#  -----------------------------------------
#                     |
#  -------------------------------------------
#  |  Populate /etc/sysconfig/network/routes |
#  |  with configured routes                 |
#  -------------------------------------------
#                     |
#  --------------------------------------------
#  |  Populate /etc/sysconfig/network/config  |
#  |  with configured DNS                     |
#  --------------------------------------------
#                     |
#          -------------------------
#          | Reload network config |
#          -------------------------
#                     |
#                  -------
#                  | end |
#                  -------

- name: Setup machine hostname
  hostname:
    name: "{{ inventory_hostname }}"

# Gather up all interfaces
- name: get available devices
  find:
    paths: /sys/class/net/
    excludes: "lo"
    file_type: any
  register: interfaces_symlinks

- name: get source path for available devices
  stat:
    path: "{{ item.path }}"
  register: interfaces_paths
  with_items: "{{ interfaces_symlinks.files | sort(attribute='path') }}"

- name: Declare interface variable
  set_fact:
    interfaces: []

# Important here, we exclude virtual networks so it does not interfere with
# eventual installed software like Docker, Kubernetes or others.
- name: Populate interface variables with networks
  set_fact:
    interfaces: "{{ interfaces + [ item.stat.lnk_source.split('/')[-1] ] }}"
  when: "'virtual' not in item.stat.lnk_source"
  with_items: "{{ interfaces_paths.results }}"

# Remove networks we do not manage in order to have control
- name: Remove unmanaged networks
  shell: |
    find /etc/sysconfig/network/ -type f -iname "ifcfg*" \
    {% for item in interfaces | list %} \
    ! -iname "*{{ item }}*" {% endfor %} -delete
  changed_when: no

# Deploy multiple ifcfg-namaget-NET_POOL-ETHX files
- name: Set connection setting files
  blockinfile:
    path: "/etc/sysconfig/network/ifcfg-{{ item.0 }}"
    mode: 0644
    block: |
      TYPE=Ethernet
      PROXY_METHOD='none'
      BROWSER_ONLY='no'
      BOOTPROTO='{% if item.1.type == 'nat' %}dhcp{% else %}static{% endif %}'
      IPADDR='{{ item.1.ip }}/24'
      PREFIX='24'
      DEFROUTE={% if item.1.get('default_route', False) %}'yes'
      {% else %}'no'
      {% endif %}
      IPV4_FAILURE_FATAL='no'
      GATEWAY0='{{ item.1.gw }}'
      {% for dns in item.1.dns %}
      DNS{{ loop.index }}='{{ dns }}'
      {% endfor %}
      IPV6INIT='yes'
      IPV6_AUTOCONF='yes'
      IPV6_DEFROUTE={% if item.1.get('default_route', False) %}'yes'
      {% else %}'no'
      {% endif %}
      IPV6_FAILURE_FATAL='no'
      IPV6_ADDR_GEN_MODE='stable-privacy'
      NAME='managed-default-{{ item.0 }}'
      UUID='{{ item.0 | to_uuid }}'
      DEVICE='{{ item.0 }}'
      ONBOOT='yes'
      STARTMODE='auto'
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.1.ip }} {{ item.0 }}"
    create: yes
  register: ifcfg_file
  with_together:
    - "{{ interfaces }}"
    - "{{ network_interfaces.values() | list }}"

# Set default route for choosen device.
- name: Set default route
  blockinfile:
    path: "/etc/sysconfig/network/routes"
    mode: 0644
    block: |
      # Destination   Gateway                 Netmask                 Device
      default         {{ item.1.gw }}            -                       {{ item.0 }}
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.1.ip }} {{ item.0 }}"
    create: yes
  register: route_file
  when: "item.1.get('default_route', False)"
  with_together:
    - "{{ interfaces }}"
    - "{{ network_interfaces.values() | list }}"

# Set default dns for choosen device.
- name: Set default DNS
  blockinfile:
    path: "/etc/sysconfig/network/config"
    mode: 0644
    block: |
      NETCONFIG_DNS_STATIC_SERVERS="{% for iface in network_interfaces.values()|list %}{% for dns in iface.dns %}{{ dns }} {% endfor %}{% endfor %}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    create: yes
  register: netconfig_file

- name: Restart networking - apply configs  # noqa 503
  systemd:
    name: network
    state: restarted
  async: 1
  poll: 0
  when: "ifcfg_file.changed or route_file.changed or netconfig_file.changed"

...
