---

# additional network setup for terraform role
#
#                  -------
#                  |start|
#                  -------
#                     |
#          ------------------------
#          | Set machine hostname |
#          ------------------------
#                     |
#           ----------------------
#           | Retrieve list of   |
#           | network interfaces |
#           | from               |
#           | /sys/class/net     |
#           ----------------------
#                     |
#     -----------------------------------
#     | Remove unmanaged networks       |
#     | from /etc/sysconfig/networks    |
#     -----------------------------------
#                     |
#  -----------------------------------------
#  | Populate /etc/sysconfig/networks with |
#  |  configured networks, dns, routes     |
#  -----------------------------------------
#                     |
#          -------------------------
#          | Reload network config |
#          -------------------------
#                     |
#                  -------
#                  | end |
#                  -------

- name: Setup machine hostname
  hostname:
    name: "{{ inventory_hostname }}"

# Gather up all interfaces
- name: get available devices
  find:
    paths: /sys/class/net/
    excludes: "lo"
    file_type: any
  register: interfaces_symlinks

- name: get source path for available devices
  stat:
    path: "{{ item.path }}"
  register: interfaces_paths
  with_items: "{{ interfaces_symlinks.files | sort(attribute='path') }}"

- name: Declare interface variable
  set_fact:
    interfaces: []

# Important here, we exclude virtual networks so it does not interfere with
# eventual installed software like Docker, Kubernetes or others.
- name: Populate interface variables with networks
  set_fact:
    interfaces: "{{ interfaces + [ item.stat.lnk_source.split('/')[-1] ] }}"
  when: "'virtual' not in item.stat.lnk_source"
  with_items: "{{ interfaces_paths.results }}"

# Remove networks we do not manage in order to have control
- name: Remove unmanaged networks
  shell: |
    find /etc/sysconfig/network-scripts -type f -iname "ifcfg*" \
    {% for item in interfaces | list %} \
    ! -iname "ifcfg-managed-*-{{ item }}" {% endfor %} -delete
  changed_when: no

# Deploy multiple ifcfg-namaget-NET_POOL-ETHX files, this is more easy to
# keep track than using directly nmcli
- name: Set connection setting files
  blockinfile:
    path: "/etc/sysconfig/network-scripts/ifcfg-managed-{{ item.0 }}"
    mode: 0644
    block: |
      TYPE=Ethernet
      PROXY_METHOD=none
      BROWSER_ONLY=no
      BOOTPROTO='{% if item.1.type == 'nat' %}dhcp{% else %}none{% endif %}'
      IPADDR="{{ item.1.ip }}"
      PREFIX=24
      DEFROUTE={% if item.1.get('default_route', False) %}yes
      {% else %}no
      {% endif %}
      IPV4_FAILURE_FATAL=no
      GATEWAY={{ item.1.gw }}
      {% for dns in item.1.dns %}
      DNS{{ loop.index }}={{ dns }}
      {% endfor %}
      IPV6INIT=yes
      IPV6_AUTOCONF=yes
      IPV6_DEFROUTE={% if item.1.get('default_route', False) %}yes
      {% else %}no
      {% endif %}
      IPV6_FAILURE_FATAL=no
      IPV6_ADDR_GEN_MODE=stable-privacy
      NAME=managed-default-{{ item.0 }}
      UUID={{ item.0 | to_uuid }}
      DEVICE="{{ item.0 }}"
      ONBOOT=yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.1.ip }} {{ item.0 }}"
    create: yes
  register: ifcfg_file
  with_together:
    - "{{ interfaces }}"
    - "{{ network_interfaces.values() | list }}"

- name: Restart networking - apply configs  # noqa 503
  command: "reboot"
  async: 1
  poll: 0
  when: "ifcfg_file.changed"

...
