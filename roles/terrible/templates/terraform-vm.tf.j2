# Base OS image to use to create a cluster of different
# nodes
resource "libvirt_volume" "os_image_{{ inventory_hostname }}" {
  name   = format("%s-%s", "{{ inventory_hostname }}", "terraform")
  source = pathexpand("{{ disk_source }}")
  pool   = "{{ pool_name }}"
  format = "qcow2"
}

{% if cloud_init is defined and cloud_init %}

data "template_file" "user_data_{{ inventory_hostname }}" {
  template = file("{{ hcl_deploy_path }}/cloud_init_{{ inventory_hostname }}.yml")
}

resource "libvirt_cloudinit_disk" "commoninit_{{ inventory_hostname }}" {
  name      = "commoninit_{{ inventory_hostname }}.iso"
  user_data = data.template_file.user_data_{{ inventory_hostname }}.rendered
}

{% endif %}

{% if data_disks is defined %}
{% for disk in data_disks %}
# Additional data disk n. {{ loop.index }}
resource "libvirt_volume" "data_disk_{{ inventory_hostname }}_{{ loop.index }}" {
  name = format("%s-%s-%s-%d", "{{ inventory_hostname }}", "terraform", "data_disk", "{{ loop.index }}")
  pool = "{{ data_disks[disk].pool }}"
  size = {{ data_disks[disk].size * 1024 * 1024 * 1024 }}
  format = "qcow2"
}
{% endfor %}
{% endif %}

# Create the machine
resource "libvirt_domain" "domain_{{ inventory_hostname }}" {
  name   = "{{ inventory_hostname }}"
  memory = {{ memory }}
  vcpu   = {{ cpu }}

  autostart = {% if vm_autostart %}true{% else %}false{% endif %}

  cpu {
    mode = "host-passthrough"
  }


{% if cloud_init is defined and cloud_init %}
  cloudinit = libvirt_cloudinit_disk.commoninit_{{ inventory_hostname }}.id
{% endif %}
  # Disk aquisition
  disk { volume_id = libvirt_volume.os_image_{{ inventory_hostname }}.id }
{% if data_disks is defined %}
{% for item in data_disks %}
  disk { volume_id = libvirt_volume.data_disk_{{ inventory_hostname }}_{{ loop.index }}.id }
{% endfor %}
{% endif %}

  boot_device { dev = ["cdrom", "hd", "network"] }

{% if mount_points is defined %}
{% for item in mount_points %}
  filesystem {
    source   = pathexpand("{{ item.src }}")
    target   = "{{ item.dest }}"
    readonly = false
  }
{% endfor %}
{% endif %}

{% for iface in network_interfaces %}


  # We first add the NAT device, so we are sure that interface[0] is where
  # we have the DHCP lease
{% if network_interfaces[iface].type  == "nat" %}
  # uses static  IP
  network_interface {
{% if network_interfaces[iface].name is defined %}
    network_name   = "{{ network_interfaces[iface].name }}"
{% endif %}
    hostname       = "{{ inventory_hostname }}"
{% if network_interfaces[iface].ip is defined %}
    addresses      = ["{{ network_interfaces[iface].ip }}"]
{% endif %}

{% if network_interfaces[iface].mac_address  is defined %}
    mac            = "{{ network_interfaces[iface].mac_address }}"
{% endif %}

    wait_for_lease = true
  }

  # We then add all additional interfaces
{% elif network_interfaces[iface].type == "bridge" %}

  network_interface {
    bridge  = "{{ network_interfaces[iface].name }}"
    hostname = "{{ inventory_hostname }}"
{% if network_interfaces[iface].mac_address  is defined %}
    mac            = "{{ network_interfaces[iface].mac_address }}"
{% endif %}
  }
{% elif network_interfaces[iface].type == "macvtap" %}

  network_interface {
    macvtap  = "{{ network_interfaces[iface].name }}"
    hostname = "{{ inventory_hostname }}"
{% if network_interfaces[iface].mac_address  is defined %}
    mac            = "{{ network_interfaces[iface].mac_address }}"
{% endif %}
  }
{% endif %}
{% endfor %}

  console {
    type        = "pty"
    target_port = "0"
    target_type = "serial"
  }

  console {
    type        = "pty"
    target_type = "virtio"
    target_port = "1"
  }

  # IMPORTANT
  # it will show no console otherwise
  video {
    type = "qxl"
  }

  graphics {
    type        = "spice"
    listen_type = "address"
    autoport    = "true"
  }

  connection {
    type             = "ssh"
    host             = self.network_interface[0].addresses[0]
    user             = "{{ ssh_user }}"
    password         = "{{ ssh_password }}"
    port             = "{{ ssh_port }}"

{% if terraform_bastion_enabled %}
{% if terraform_bastion_host != 'localhost' and terraform_bastion_host != '127.0.0.1' %}
    bastion_host     = "{{ terraform_bastion_host }}"
    bastion_port     = "{{ terraform_bastion_port }}"
    bastion_user     = "{{ terraform_bastion_user }}"
    bastion_password = "{{ terraform_bastion_password }}"
{% if ansible_ssh_private_key_file is defined %}
    bastion_private_key = "${file("{{ ansible_ssh_private_key_file }}")}"
{% endif %}
{% endif %}
{% endif %}
  }
  # Hostdev passtrought
  # provisioner "local-exec" {
  #   command = "virsh --connect {{ provider_uri }} attach-device {{ inventory_hostname }} --file passtrought-host.xml --live --persistent"
  # }

{% if ssh_public_key is defined %}
  provisioner "remote-exec" {
    inline = [
      "mkdir -p -m 0700 ~/.ssh",
      "echo '{{ ssh_public_key }}' | tee -a ~/.ssh/authorized_keys",
      "chmod 0600 ~/.ssh/authorized_keys"
      ]
    }
{% endif %}

{% if terraform_custom_provisioners is defined %}
    provisioner "remote-exec" {
      inline = [
{% for provisioner_command in terraform_custom_provisioners %}
        "{{ provisioner_command }}"{% if not loop.last %},{% endif %}

{% endfor %}

      ]
    }
{% endif %}

{% if ansible_dependencies is defined %}
    provisioner "remote-exec" {
      inline = [
{% for pkg in ansible_dependencies %}
{% if not 'None' in pkg %}
        "{{ install_command }} {{ pkg }}"{% if not loop.last %},{% endif %}
{% endif %}

{% endfor %}

      ]
    }
{% endif %}

}

# Return the NAT ip obtained by the DHCP lease, we do this because it may be
# the one we declared, but also can be different (dhcp lease was still occupied)
output "{{ inventory_hostname }}" {
  value = "${libvirt_domain.domain_{{ inventory_hostname }}.network_interface.0.addresses}"
}
